import Mathlib
import DurhamAlgGeom2024.Tutorial.«06Separated»
section missing_instance
/-

Andrew's definition of the algebra structure on `HomogeneousLocalization 𝒜 S`.

-/
open HomogeneousLocalization in
instance {R A ι : Type*} [CommRing R] [CommRing A] [Algebra R A] [DecidableEq ι]
  [AddCommMonoid ι] (𝒜 : ι → Submodule R A) [GradedAlgebra 𝒜] (S : Submonoid A) :
    Algebra R (HomogeneousLocalization 𝒜 S) :=
  ((fromZeroRingHom 𝒜 S).comp (algebraMap _ _)).toAlgebra

@[simp]
lemma HomogeneousLocalization.algebraMap_eq
  {R A ι : Type*} [CommRing R] [CommRing A] [Algebra R A] [DecidableEq ι]
  [AddCommMonoid ι] (𝒜 : ι → Submodule R A) [GradedAlgebra 𝒜] (S : Submonoid A) :
    algebraMap R (HomogeneousLocalization 𝒜 S) = ((fromZeroRingHom 𝒜 S).comp (algebraMap _ _)) := rfl

end missing_instance

noncomputable section statement

variable {R₀ S : Type}
variable [CommRing R₀] [CommRing S] [Algebra R₀ S]
variable (𝒜 : ℕ → Submodule R₀ S) [GradedAlgebra 𝒜]

instance : Algebra (𝒜 0) S := (SetLike.GradeZero.subalgebra 𝒜).toAlgebra
variable [Algebra.FiniteType (𝒜 0) S]

/-

## Generation of S by homogeneous elements

By definition `S = ⨁ᵢ (𝒜 i)` is a graded ring (graded by `ℕ`) and
in particular `S` is an `𝒜 0`-algebra.

By assumption `S` is finitely-generated `𝒜 0`-algebra.

What we next claim is that `S` is generated by finitely many *homogeneous*
elements of `S`.

-/

-- S is finitely-generated over 𝒜 0
example : ∃ (F : Set S),
    (F.Finite) ∧ (Algebra.adjoin (𝒜 0) F = ⊤) := by
  obtain ⟨F, hF⟩ := Algebra.FiniteType.out (R := 𝒜 0) (A := S)
  exact ⟨F, F.finite_toSet, hF⟩

-- But we need homogeneous generators.
theorem FG_by_homogeneous : ∃ (ι : Type) (x : ι → S) (_ : Fintype ι),
    (Algebra.adjoin (𝒜 0) (Set.range x) = ⊤) ∧
    (∀ i : ι, ∃ n : ℕ, 0 < n ∧ x i ∈ 𝒜 n) := by
  sorry

open HomogeneousLocalization

/-

## S_{(f)} is an 𝒜₀-algebra

Although S_{(f)} isn't an S-algebra (because S has
stuff in degree not zero but S_{(f)} is only degree 0 stuff)

-/

variable {d : ℕ}
variable {f : S} (hf : f ∈ 𝒜 d)

--#synth Algebra (𝒜 0) (Away 𝒜 f)

variable {A : Type} [CommRing A] [IsDomain A] [ValuationRing A]
variable {K : Type} [Field K] [Algebra A K] [IsFractionRing A K]

/-
The diagram in the question

                  φ
              K <--- S(f)
              /\      /\
     canonical|       |canonical
              |       |
              A <---- 𝒜₀
                  φ₀
-/

variable (φ₀ : (𝒜 0) →+* A)
variable (φ : (Away 𝒜 f) →+* K)
variable (hcomm : (algebraMap A K).comp φ₀ = φ.comp (fromZeroRingHom 𝒜 _))

theorem projective_implies_proper_aux : ∃ (x₀ : S) (e : ℕ) (he : 0 < e)
    (h₀ : x₀ ∈ 𝒜 e)
    (φ' : Away 𝒜 (f * x₀) →+* K),
    (φ'.comp (map2 𝒜 h₀ rfl) = φ) ∧
    Set.range (φ'.comp (map2 𝒜 hf (mul_comm f x₀))) ⊆ Set.range (algebraMap A K) := by
  classical
  obtain ⟨ι, x, h1, h2, h3⟩:= FG_by_homogeneous 𝒜
  choose di hdi hxdi using h3
  let ψ: (i : ι) → ValuationRing.ValueGroup A K :=
    fun i ↦ ValuationRing.valuation A K <| (φ (mk {
      deg := d * di i
      num := ⟨x i ^d, SetLike.pow_mem_graded d (hxdi i) ⟩
      den := ⟨f^(di i) , mul_comm d (di i) ▸ SetLike.pow_mem_graded (di i) ( hf)⟩
      den_mem := ⟨_, rfl⟩
    }))^ ∏ j in Finset.univ.erase i, di j
  cases isEmpty_or_nonempty ι
  · sorry
  · set Kmax := Finset.max' (Finset.image ψ Finset.univ) sorry
    have : Kmax ∈ _ := Finset.max'_mem (Finset.image ψ Finset.univ) sorry
    simp only [Finset.mem_image, Finset.mem_univ, true_and] at this
    obtain ⟨i0, hi0⟩ := this
    have hi0 : ∀ (j : ι), ψ j ≤ ψ i0 := by
      intro j
      rw [hi0]
      exact Finset.le_max' (Finset.image ψ Finset.univ) (ψ j) (by simp)
    use x i0
    use di i0
    use hdi i0
    use hxdi i0
    sorry

end statement
